window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "moleculegraph.general_utils", "modulename": "moleculegraph.general_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "moleculegraph.general_utils.unite_atoms", "modulename": "moleculegraph.general_utils", "qualname": "unite_atoms", "kind": "function", "doc": "<p>generates united atom coordinates from a list of atoms.</p>\n\n<p>TO DO:</p>\n\n<ul>\n<li>the atoms and masses objects are not obvious...</li>\n</ul>\n\n<p>Parameters:</p>\n\n<ul>\n<li>elements:\n<ul>\n<li>list of atoms elements.</li>\n</ul></li>\n<li>atoms:\n<ul>\n<li>list of atoms coordinates.</li>\n</ul></li>\n<li>masses:\n<ul>\n<li>masses of the atoms.</li>\n</ul></li>\n<li>bond_matrix:\n<ul>\n<li>bond matrix of the corresponding molecule</li>\n<li>...distance matrix works too</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>new_matrix:\n<ul>\n<li>list of united atoms with coordinates.</li>\n</ul></li>\n<li>new_masses:\n<ul>\n<li>list of corresponding united atom masses.</li>\n</ul></li>\n<li>new_bonds:\n<ul>\n<li>list of corresponding united atom bonds.</li>\n<li>you can generate a new bond or distance matrix with this list.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">elements</span>, </span><span class=\"param\"><span class=\"n\">atoms</span>, </span><span class=\"param\"><span class=\"n\">masses</span>, </span><span class=\"param\"><span class=\"n\">bond_list</span>, </span><span class=\"param\"><span class=\"n\">UA</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.general_utils.assign_coos_via_distance_mat", "modulename": "moleculegraph.general_utils", "qualname": "assign_coos_via_distance_mat", "kind": "function", "doc": "<p>NOT MATURE !!! (but sometimes useful)</p>\n\n<p>Assigns coos to suit a reference based on a distance matrix relying to the coos.\nReference and distance matrix/ coos belong to the same molecule type but are sorted in\ndifferent ways. Sorted rows (or cols) of a distance matrix belong to the same atom when\nthey are equal.</p>\n\n<p>TO DO:</p>\n\n<ul>\n<li>add check based on levensthein to omit errors through branches!!!</li>\n<li>gernalizable for more than only coos???</li>\n<li>bad names :(</li>\n</ul>\n\n<p>Parameters:</p>\n\n<ul>\n<li>coos_list:\n<ul>\n<li>list of coordinates (or anything else???!!!).</li>\n</ul></li>\n<li>distance_matrix:\n<ul>\n<li>distance matrix which belongs to the coos_list.</li>\n</ul></li>\n<li>reference:\n<ul>\n<li>distance matrix which belongs to the reference you want to apply the coos to.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>new_coos_list:\n<ul>\n<li>list of coordinates fitting the reference.</li>\n</ul></li>\n<li>idx:\n<ul>\n<li>indexes to translate sth. to reference.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">coos_list</span>, </span><span class=\"param\"><span class=\"n\">distance_matrix</span>, </span><span class=\"param\"><span class=\"n\">reference</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.general_utils.pair_from_row", "modulename": "moleculegraph.general_utils", "qualname": "pair_from_row", "kind": "function", "doc": "<p>Gets pair potential from Joachims MC Code pair_potentials file.\nCharges are added later ;)</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>row:\n<ul>\n<li>splitted line i.e. list of line in pair_potentials file.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>pair potential dictionary</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">row</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.general_utils.pair_of_h", "modulename": "moleculegraph.general_utils", "qualname": "pair_of_h", "kind": "function", "doc": "<p>Builds pair potential dummy for hydrogen atoms.\nCharges are added later ;)</p>\n\n<p>Parameters:\n    none</p>\n\n<p>Returns:</p>\n\n<ul>\n<li>hydrogen pair potential dictionary</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.general_utils.get_charge", "modulename": "moleculegraph.general_utils", "qualname": "get_charge", "kind": "function", "doc": "<p>Assigns charge to pair potential dict.\nUses the normalized_levenshtein algorithm :)</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>row:\n<ul>\n<li>splitted charge line i.e. list of line in pair_potentials file.</li>\n</ul></li>\n<li>pair_dict:\n<ul>\n<li>dictionary containing pair potentials</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>key:\n<ul>\n<li>dict key i.e. atom name the charge belongs to.</li>\n</ul></li>\n<li>charge:\n<ul>\n<li>float value of the charge</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">row</span>, </span><span class=\"param\"><span class=\"n\">pair_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.general_utils.read_pair_potentials", "modulename": "moleculegraph.general_utils", "qualname": "read_pair_potentials", "kind": "function", "doc": "<p>Reads pair potentials from Joachims MC Code pair_potentials file.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>path:\n<ul>\n<li>path to pair_potentials file.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>pair_dict:\n<ul>\n<li>dictionary containing pair potentials</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.general_utils.read_bond_potentials", "modulename": "moleculegraph.general_utils", "qualname": "read_bond_potentials", "kind": "function", "doc": "<p>Reads bond potentials from Joachims MC Code bond_potentials file.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>path:\n<ul>\n<li>path to bond_potentials file.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>bond_dict:\n<ul>\n<li>dictionary containing bond potentials</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.general_utils.read_angle_potentials", "modulename": "moleculegraph.general_utils", "qualname": "read_angle_potentials", "kind": "function", "doc": "<p>Reads angle potentials from Joachims MC Code angle_potentials file.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>path:\n<ul>\n<li>path to angle_potentials file.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>angle_dict:\n<ul>\n<li>dictionary containing angle potentials</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.general_utils.read_torsion_potentials", "modulename": "moleculegraph.general_utils", "qualname": "read_torsion_potentials", "kind": "function", "doc": "<p>Reads torsion potentials from Joachims MC Code torsion_potentials file.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>path:\n<ul>\n<li>path to torsion_potentials file.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>torsion_dict:\n<ul>\n<li>dictionary containing torsion potentials</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.general_utils.read_xyz", "modulename": "moleculegraph.general_utils", "qualname": "read_xyz", "kind": "function", "doc": "<p>Reads xyz file. Supports tubomole xyz with energy in header</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>path:\n<ul>\n<li>path to xyz file.</li>\n</ul></li>\n<li>energy:\n<ul>\n<li>returns energy if true.</li>\n<li>use this with turbomol QM-results.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>xyz:\n<ul>\n<li>list of dicts, keys: \"atom\": atom name and \"xyz\": coordinates.</li>\n</ul></li>\n<li>energy:\n<ul>\n<li>(optional) if energy = True (bad style ?)</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">energy</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.general_utils.assign_CHx", "modulename": "moleculegraph.general_utils", "qualname": "assign_CHx", "kind": "function", "doc": "<p>Builds united atom groups fromm all atom xyz.\nWorks with turbomol results and read_xyz def.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>xyz:\n<ul>\n<li>list of atom dicts, keys: \"atom\": atom name and \"xyz\": coordinates.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>xyz_CHx:\n<ul>\n<li>list of united atom dicts, keys: \"atom\": atom name and \"xyz\": coordinates.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xyz</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.general_utils.kill_CHx", "modulename": "moleculegraph.general_utils", "qualname": "kill_CHx", "kind": "function", "doc": "<p>Kills C-bonded hydrogens fromm all atom xyz.\nWorks with turbomol results and read_xyz def.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>xyz:\n<ul>\n<li>list of atom dicts, keys: \"atom\": atom name and \"xyz\": coordinates.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>xyz_CHx:\n<ul>\n<li>list of atom dicts, keys: \"atom\": atom name and \"xyz\": coordinates.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xyz</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.general_utils.to_xyz", "modulename": "moleculegraph.general_utils", "qualname": "to_xyz", "kind": "function", "doc": "<p>Writes xyz file.\nWorks with turbomol results and read_xyz def.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>xyz:\n<ul>\n<li>list of atom dicts, keys: \"atom\": atom name and \"xyz\": coordinates.</li>\n</ul></li>\n<li>path:\n<ul>\n<li>path to xyz file.</li>\n</ul></li>\n</ul>\n\n<p>Returns:\n    nothing</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xyz</span>, </span><span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.general_utils.distance", "modulename": "moleculegraph.general_utils", "qualname": "distance", "kind": "function", "doc": "<p>Returns spatial distance.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>x1, x2:\n<ul>\n<li>vectors.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>spatial distance between x1 and x2.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x1</span>, </span><span class=\"param\"><span class=\"n\">x2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.general_utils.unit_vector", "modulename": "moleculegraph.general_utils", "qualname": "unit_vector", "kind": "function", "doc": "<p>Returns the unit vector of the vector.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>vector:\n<ul>\n<li>vector.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>unit vector</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vector</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.general_utils.angle_between", "modulename": "moleculegraph.general_utils", "qualname": "angle_between", "kind": "function", "doc": "<p>Returns the angle in radians between vectors x1, x2, x3.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>x1, x2, x3:\n<ul>\n<li>vectors.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>rad angle</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x1</span>, </span><span class=\"param\"><span class=\"n\">x2</span>, </span><span class=\"param\"><span class=\"n\">x3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.general_utils.dihedral", "modulename": "moleculegraph.general_utils", "qualname": "dihedral", "kind": "function", "doc": "<p>Returns the dihedral angle in radians between vectors x0, x1, x2, x3.\nPraxeolitic formula -> 1 sqrt, 1 cross product</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>x0, x1, x2, x3:\n<ul>\n<li>vectors.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>deg angle</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x0</span>, </span><span class=\"param\"><span class=\"n\">x1</span>, </span><span class=\"param\"><span class=\"n\">x2</span>, </span><span class=\"param\"><span class=\"n\">x3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph", "modulename": "moleculegraph", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "moleculegraph.molecule", "modulename": "moleculegraph", "qualname": "molecule", "kind": "class", "doc": "<p>simple undirected graph representation for molecules and more.</p>\n\n<p>write code about molecules without the need to care about them.</p>\n\n<p>semantics only. Bring your own syntax.</p>\n\n<p>Main results are:</p>\n\n<ul>\n<li>distance matrix of the molecule.</li>\n<li>atom, bond, angle, torsion lists.</li>\n</ul>\n\n<p>YOU can use them to:</p>\n\n<ul>\n<li>map force-field information onto your molecule.</li>\n<li>generate inputs for templating trajectories and coordinates</li>\n<li>use group contribution approaches</li>\n<li>process coordinates from the PubChem-API</li>\n</ul>\n\n<p>Furthermore:</p>\n\n<ul>\n<li>this graph-representation is quite general and not limited to molecules.</li>\n<li>...you might use it to represent your favorite baking recipes and optimize them.</li>\n</ul>\n"}, {"fullname": "moleculegraph.molecule.__init__", "modulename": "moleculegraph", "qualname": "molecule.__init__", "kind": "function", "doc": "<p>initializes molecules based on graph-list representation.</p>\n\n<p>The term index (or idx) always refers to a character in the string, \nbe it semantic or syntactic. Semantics and syntax of the string are \nno longer important once the bond list and thus the actual graph is \ncreated. Then there are only syntactic objects, i.e. atoms.\nThus, all numbers occuring in bond, angle or torsional lists or in\ndistance matrices refer to atomic numbers. Indexes and semantic lists \nare only important for advanced applications. For example, generating\nstrings with the same meaning. If both options are available they are\nare marked with index/indexes/idx and number/numbers. For example:\nring_root_numbers and ring_root_indexes.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>mol:\n<ul>\n<li>string representation of a molecule.</li>\n</ul></li>\n</ul>\n\n<p>Returns:\n    nothing</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mol</span></span>)</span>"}, {"fullname": "moleculegraph.molecule.molecule", "modulename": "moleculegraph", "qualname": "molecule.molecule", "kind": "variable", "doc": "<p>array representation of the molecule i.e. all keys/words/whatever in a list</p>\n"}, {"fullname": "moleculegraph.molecule.f", "modulename": "moleculegraph", "qualname": "molecule.f", "kind": "variable", "doc": "<p>array with all functions. </p>\n\n<ul>\n<li>branches pointing forward f &gt; 0</li>\n<li>rings pointing backward f &lt; 0</li>\n<li>beads without function f = 0</li>\n</ul>\n"}, {"fullname": "moleculegraph.molecule.n", "modulename": "moleculegraph", "qualname": "molecule.n", "kind": "variable", "doc": "<p>array with atom numbers. branches and rings n = -1 as they are no atoms</p>\n"}, {"fullname": "moleculegraph.molecule.i", "modulename": "moleculegraph", "qualname": "molecule.i", "kind": "variable", "doc": "<p>array with indexes. atoms, branches and rings get an index</p>\n"}, {"fullname": "moleculegraph.molecule.len", "modulename": "moleculegraph", "qualname": "molecule.len", "kind": "variable", "doc": "<p>number of all elements i.e. atoms, branches and rings</p>\n"}, {"fullname": "moleculegraph.molecule.atom_indexes", "modulename": "moleculegraph", "qualname": "molecule.atom_indexes", "kind": "variable", "doc": "<p>array with indexes of all atoms</p>\n"}, {"fullname": "moleculegraph.molecule.atom_names", "modulename": "moleculegraph", "qualname": "molecule.atom_names", "kind": "variable", "doc": "<p>array with names of all atoms</p>\n"}, {"fullname": "moleculegraph.molecule.atom_number", "modulename": "moleculegraph", "qualname": "molecule.atom_number", "kind": "variable", "doc": "<p>number of all atoms</p>\n"}, {"fullname": "moleculegraph.molecule.atom_numbers", "modulename": "moleculegraph", "qualname": "molecule.atom_numbers", "kind": "variable", "doc": "<p>array with numbers of all atoms</p>\n"}, {"fullname": "moleculegraph.molecule.idx_neighbour_list", "modulename": "moleculegraph", "qualname": "molecule.idx_neighbour_list", "kind": "variable", "doc": "<p>array with indexes of all neighboured/bonded atoms</p>\n"}, {"fullname": "moleculegraph.molecule.neighbour_list", "modulename": "moleculegraph", "qualname": "molecule.neighbour_list", "kind": "variable", "doc": "<p>array with numbers of all neighboured/bonded atoms</p>\n"}, {"fullname": "moleculegraph.molecule.ring_root_indexes", "modulename": "moleculegraph", "qualname": "molecule.ring_root_indexes", "kind": "variable", "doc": "<p>array with indexes of all atoms rooting a ring</p>\n"}, {"fullname": "moleculegraph.molecule.distance_matrix", "modulename": "moleculegraph", "qualname": "molecule.distance_matrix", "kind": "variable", "doc": "<p>distance matrix of all atoms in the molecule</p>\n"}, {"fullname": "moleculegraph.molecule.bond_lists", "modulename": "moleculegraph", "qualname": "molecule.bond_lists", "kind": "variable", "doc": "<p>nested array with bond lists </p>\n\n<ul>\n<li>starting from atoms separeted by one bond bond_lists[0]</li>\n<li>then atoms separeted by two bonds bond_lists[1] </li>\n<li>...</li>\n</ul>\n"}, {"fullname": "moleculegraph.molecule.idx_bond_list", "modulename": "moleculegraph", "qualname": "molecule.idx_bond_list", "kind": "variable", "doc": "<p>array with indexes of all neighboured/bonded atoms</p>\n"}, {"fullname": "moleculegraph.molecule.bond_list", "modulename": "moleculegraph", "qualname": "molecule.bond_list", "kind": "variable", "doc": "<p>array with numbers of all neighboured/bonded atoms</p>\n"}, {"fullname": "moleculegraph.molecule.bond_keys", "modulename": "moleculegraph", "qualname": "molecule.bond_keys", "kind": "variable", "doc": "<p>array with keys of all neighboured/bonded atoms</p>\n"}, {"fullname": "moleculegraph.molecule.angle_list", "modulename": "moleculegraph", "qualname": "molecule.angle_list", "kind": "variable", "doc": "<p>array of numbers of all angle forming atoms (separated by 2 bonds)</p>\n"}, {"fullname": "moleculegraph.molecule.angle_names", "modulename": "moleculegraph", "qualname": "molecule.angle_names", "kind": "variable", "doc": "<p>array of names of all angle forming atoms (separated by 2 bonds)</p>\n"}, {"fullname": "moleculegraph.molecule.angle_keys", "modulename": "moleculegraph", "qualname": "molecule.angle_keys", "kind": "variable", "doc": "<p>array of keys of all angle forming atoms (separated by 2 bonds)</p>\n"}, {"fullname": "moleculegraph.molecule.torsion_list", "modulename": "moleculegraph", "qualname": "molecule.torsion_list", "kind": "variable", "doc": "<p>array of numbers of all dihedral forming atoms (separated by 3 bonds)</p>\n"}, {"fullname": "moleculegraph.molecule.torsion_names", "modulename": "moleculegraph", "qualname": "molecule.torsion_names", "kind": "variable", "doc": "<p>array of names of all dihedral forming atoms (separated by 3 bonds)</p>\n"}, {"fullname": "moleculegraph.molecule.torsion_keys", "modulename": "moleculegraph", "qualname": "molecule.torsion_keys", "kind": "variable", "doc": "<p>array of keys of all dihedral forming atoms (separated by 3 bonds)</p>\n"}, {"fullname": "moleculegraph.molecule.ring_close_indexes", "modulename": "moleculegraph", "qualname": "molecule.ring_close_indexes", "kind": "variable", "doc": "<p>array with indexes of all atoms closing a ring</p>\n"}, {"fullname": "moleculegraph.molecule.unique_atom_names", "modulename": "moleculegraph", "qualname": "molecule.unique_atom_names", "kind": "variable", "doc": "<p>array with unique atom names</p>\n"}, {"fullname": "moleculegraph.molecule.unique_atom_numbers", "modulename": "moleculegraph", "qualname": "molecule.unique_atom_numbers", "kind": "variable", "doc": "<p>array with numbers of unique atom names</p>\n"}, {"fullname": "moleculegraph.molecule.unique_bond_keys", "modulename": "moleculegraph", "qualname": "molecule.unique_bond_keys", "kind": "variable", "doc": "<p>array with unique bond keys</p>\n"}, {"fullname": "moleculegraph.molecule.unique_bond_indexes", "modulename": "moleculegraph", "qualname": "molecule.unique_bond_indexes", "kind": "variable", "doc": "<p>array with unique bond indexes</p>\n"}, {"fullname": "moleculegraph.molecule.unique_bond_inverse", "modulename": "moleculegraph", "qualname": "molecule.unique_bond_inverse", "kind": "variable", "doc": "<p>array to invert unique bonds</p>\n"}, {"fullname": "moleculegraph.molecule.unique_bond_names", "modulename": "moleculegraph", "qualname": "molecule.unique_bond_names", "kind": "variable", "doc": "<p>array with unique bond names</p>\n"}, {"fullname": "moleculegraph.molecule.unique_bond_numbers", "modulename": "moleculegraph", "qualname": "molecule.unique_bond_numbers", "kind": "variable", "doc": "<p>array with numbers of unique bond names</p>\n"}, {"fullname": "moleculegraph.molecule.unique_angle_keys", "modulename": "moleculegraph", "qualname": "molecule.unique_angle_keys", "kind": "variable", "doc": "<p>array with unique angle keys</p>\n"}, {"fullname": "moleculegraph.molecule.unique_angle_indexes", "modulename": "moleculegraph", "qualname": "molecule.unique_angle_indexes", "kind": "variable", "doc": "<p>array with unique angle indexes</p>\n"}, {"fullname": "moleculegraph.molecule.unique_angle_inverse", "modulename": "moleculegraph", "qualname": "molecule.unique_angle_inverse", "kind": "variable", "doc": "<p>array to invert unique angles</p>\n"}, {"fullname": "moleculegraph.molecule.unique_angle_names", "modulename": "moleculegraph", "qualname": "molecule.unique_angle_names", "kind": "variable", "doc": "<p>array with unique angle names</p>\n"}, {"fullname": "moleculegraph.molecule.unique_angle_numbers", "modulename": "moleculegraph", "qualname": "molecule.unique_angle_numbers", "kind": "variable", "doc": "<p>array with numbers of unique angle names</p>\n"}, {"fullname": "moleculegraph.molecule.unique_torsion_keys", "modulename": "moleculegraph", "qualname": "molecule.unique_torsion_keys", "kind": "variable", "doc": "<p>array with unique torsion keys</p>\n"}, {"fullname": "moleculegraph.molecule.unique_torsion_indexes", "modulename": "moleculegraph", "qualname": "molecule.unique_torsion_indexes", "kind": "variable", "doc": "<p>array with unique torsion indexes</p>\n"}, {"fullname": "moleculegraph.molecule.unique_torsion_inverse", "modulename": "moleculegraph", "qualname": "molecule.unique_torsion_inverse", "kind": "variable", "doc": "<p>array to invert unique torsions</p>\n"}, {"fullname": "moleculegraph.molecule.unique_torsion_names", "modulename": "moleculegraph", "qualname": "molecule.unique_torsion_names", "kind": "variable", "doc": "<p>array with unique torsion names</p>\n"}, {"fullname": "moleculegraph.molecule.unique_torsion_numbers", "modulename": "moleculegraph", "qualname": "molecule.unique_torsion_numbers", "kind": "variable", "doc": "<p>array with numbers of unique torsion names</p>\n"}, {"fullname": "moleculegraph.molecule.unique_atom_pair_names", "modulename": "moleculegraph", "qualname": "molecule.unique_atom_pair_names", "kind": "variable", "doc": "<p>array with unique atom pair names. use them for combining rules.</p>\n"}, {"fullname": "moleculegraph.molecule.unique_atom_pair_keys", "modulename": "moleculegraph", "qualname": "molecule.unique_atom_pair_keys", "kind": "variable", "doc": "<p>array with unique atom pair keys. use them for combining rules.</p>\n"}, {"fullname": "moleculegraph.molecule.get_neighbour_list", "modulename": "moleculegraph", "qualname": "molecule.get_neighbour_list", "kind": "function", "doc": "<p>generates a neighbour list from an initialized molecule</p>\n\n<p>Parameters: None</p>\n\n<p>Returns:</p>\n\n<ul>\n<li>neighbour_list:\n<ul>\n<li>list of neighboured atoms containing their atom numbers.</li>\n</ul></li>\n<li>idx_neighbour_list:\n<ul>\n<li>list of neighboured atoms containing their atom indexes.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule.get_bond_matrix", "modulename": "moleculegraph", "qualname": "molecule.get_bond_matrix", "kind": "function", "doc": "<p>generates bond matrix from an initialized molecule</p>\n\n<p>Parameters: None</p>\n\n<p>Returns:</p>\n\n<ul>\n<li>bond_matrix:\n<ul>\n<li>bond matrix of you molecule</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule.get_distance_matrix", "modulename": "moleculegraph", "qualname": "molecule.get_distance_matrix", "kind": "function", "doc": "<p>generates distance matrix from an initialized molecule.\nFurthermore different angle and torsion lists are generated.</p>\n\n<p>Parameters: None</p>\n\n<p>Returns:</p>\n\n<ul>\n<li>distance_matrix:\n<ul>\n<li>distance matrix of you molecule</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule.get_atom_index", "modulename": "moleculegraph", "qualname": "molecule.get_atom_index", "kind": "function", "doc": "<p>returns index of atom.</p>\n\n<ul>\n<li>Number: atom number</li>\n<li>Index:  index in list representation of molecule.\nNumber and index are differing due to functionals in the list.</li>\n</ul>\n\n<p>Parameters:</p>\n\n<ul>\n<li>no:\n<ul>\n<li>number of the atom</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>index of atom number \"no\"</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">no</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule.get_atom_no", "modulename": "moleculegraph", "qualname": "molecule.get_atom_no", "kind": "function", "doc": "<p>returns index of atom.</p>\n\n<ul>\n<li>Number: atom number</li>\n<li>Index:  index in list representation of molecule.\nNumber and index are differing due to functionals in the list.</li>\n</ul>\n\n<p>Parameters:</p>\n\n<ul>\n<li>idx:\n<ul>\n<li>idx of the atom</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>number of atom with index</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule.get_next_atom_idx", "modulename": "moleculegraph", "qualname": "molecule.get_next_atom_idx", "kind": "function", "doc": "<p>returns index of the next atom after index idx.\nIndex:  index in list representation of molecule.\nNumber and index are differing due to functionals in the list.</p>\n\n<p>Parameters:\nidx:\n    - index in list representation of molecule</p>\n\n<p>Returns:</p>\n\n<ul>\n<li>index of the next atom after index idx</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule.get_last_atom_idx", "modulename": "moleculegraph", "qualname": "molecule.get_last_atom_idx", "kind": "function", "doc": "<p>returns index of the atom before index idx.\nIndex:  index in list representation of molecule.\nNumber and index are differing due to functionals in the list.</p>\n\n<p>Parameters:\nidx:\n    - index in list representation of molecule</p>\n\n<p>Returns:</p>\n\n<ul>\n<li>index of the atom before index idx</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule.get_next_atom_no", "modulename": "moleculegraph", "qualname": "molecule.get_next_atom_no", "kind": "function", "doc": "<p>returns number of the atom after index idx.\nIndex:  index in list representation of molecule.\nNumber: atom number\nNumber and index are differing due to functionals in the list.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>idx:\n<ul>\n<li>index in list representation of molecule</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>number of the atom after index idx</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule.get_last_atom_no", "modulename": "moleculegraph", "qualname": "molecule.get_last_atom_no", "kind": "function", "doc": "<p>returns number of the atom before index idx.\nIndex:  index in list representation of molecule.\nNumber: atom number\nNumber and index are differing due to functionals in the list.</p>\n\n<p>Parameters:\n    self:\n        - initialized molecule.\n    idx:\n        - index in list representation of molecule</p>\n\n<p>Returns:\n    number of the atom before index idx</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule.map_molecule_via_atom_names", "modulename": "moleculegraph", "qualname": "molecule.map_molecule_via_atom_names", "kind": "function", "doc": "<p>maps information from a dictionary onto the molecule.\nUse this for molecule information i.e. coordinates, group contributions,...</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>data:\n<ul>\n<li>dictionary with: keys == atom names !!!</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>mapped data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule.map_unique_via_atom_names", "modulename": "moleculegraph", "qualname": "molecule.map_unique_via_atom_names", "kind": "function", "doc": "<p>Maps information from a dictionary onto unique elements of the molecule.\nPreserves the order of the original list.\nUse this for force-field information i.e. potentials,...</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>data:\n<ul>\n<li>dictionary with: keys == atom names !!!</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>mapped unique data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule.map_molecule", "modulename": "moleculegraph", "qualname": "molecule.map_molecule", "kind": "function", "doc": "<p>maps information from a dictionary onto a goal.\nUse this for molecule information i.e. coordinates, group contributions,...</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>goal:\n<ul>\n<li>list of keys</li>\n</ul></li>\n<li>data:\n<ul>\n<li>dictionary with keys in goal</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>mapped data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">goal</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule.map_unique", "modulename": "moleculegraph", "qualname": "molecule.map_unique", "kind": "function", "doc": "<p>Maps information from a dictionary onto unique elements a goal.\nPreserves the order of the original list.\nUse this for force-field information i.e. potentials,...</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>goal:\n<ul>\n<li>list of keys</li>\n</ul></li>\n<li>data:\n<ul>\n<li>dictionary with keys in goal</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>mapped unique data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">goal</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule.map_nested", "modulename": "moleculegraph", "qualname": "molecule.map_nested", "kind": "function", "doc": "<p>Maps information from a dictionary onto nested elements of a goal.\nPreserves the order of the original list.\nUse this for advanced force-field information i.e. mixing rules,...</p>\n\n<p>same as:\n[ self.map_unique( m, data) for m in goal ]</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>goal:\n-with list list of keys</li>\n<li>data:\n-dictionary with keys in goal</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>mapped unique data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">goal</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule.get_distance", "modulename": "moleculegraph", "qualname": "molecule.get_distance", "kind": "function", "doc": "<p>Returns distance between atoms no x and y\n0: same atom i.e. x==y\n1: bond\n2: angle\n3: torsion</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>x,y:\n<ul>\n<li>atom numbers</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>distance</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule.get_sorted_key", "modulename": "moleculegraph", "qualname": "molecule.get_sorted_key", "kind": "function", "doc": "<p>Sorts a list alphabetically.\nVery important for dictionary keys in the molecule class!!!</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>x:\n<ul>\n<li>string list to sort</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>key (string) and sorted list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule.visualize", "modulename": "moleculegraph", "qualname": "molecule.visualize", "kind": "function", "doc": "<p>plots and visualizes molecule</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>saveto:\n<ul>\n<li>optional, location to save pic of graph to,</li>\n<li>add file format at the end ;)</li>\n</ul></li>\n</ul>\n\n<p>Returns:\n    nothing</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">saveto</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils", "modulename": "moleculegraph.molecule_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "moleculegraph.molecule_utils.sort_force_fields", "modulename": "moleculegraph.molecule_utils", "qualname": "sort_force_fields", "kind": "function", "doc": "<p>sorts force field i.e. atom lists alphabetically.\nVery important for dictionary keys in the molecule class!!!</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>x:\n<ul>\n<li>string list to sort.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>sorted list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.sort_graph_key", "modulename": "moleculegraph.molecule_utils", "qualname": "sort_graph_key", "kind": "function", "doc": "<p>sorts string i.e. the encapsulated atom lists alphabetically.\nVery important for dictionary keys in the molecule class!!!</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>x:\n-string to sort.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>sorted list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.read_json", "modulename": "moleculegraph.molecule_utils", "qualname": "read_json", "kind": "function", "doc": "<p>well...</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>path:\n-path to json file.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>dictionary, list of dictionaries (or whatever is in the file)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.unique_sort", "modulename": "moleculegraph.molecule_utils", "qualname": "unique_sort", "kind": "function", "doc": "<p>Returns unique elements of a list array.</p>\n\n<p>Important:</p>\n\n<p>not the list is sorted but the indexes\ni.e. this function preserves the order\nof the original list.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>X:\n<ul>\n<li>list array.</li>\n</ul></li>\n<li>return_inverse:\n<ul>\n<li>boolean</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>unique list array\n( and index and inverse if return_inverse = True )</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">return_inverse</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.get_bond_list", "modulename": "moleculegraph.molecule_utils", "qualname": "get_bond_list", "kind": "function", "doc": "<p>generates a list of atom pairs fullfilling a certain\ndistance criterium.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>distance_matrix:\n<ul>\n<li>distance matrix.</li>\n</ul></li>\n<li>distance:\n<ul>\n<li>distance to look for\n<ul>\n<li>1: bond</li>\n<li>2: angle</li>\n<li>3: torsion/dihedral</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>bond list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">distance_matrix</span>, </span><span class=\"param\"><span class=\"n\">distance</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.get_distances", "modulename": "moleculegraph.molecule_utils", "qualname": "get_distances", "kind": "function", "doc": "<p>used in get_distance_list.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>y:\n<ul>\n<li>hmmm.</li>\n</ul></li>\n<li>xlist:\n<ul>\n<li>hmmm</li>\n</ul></li>\n<li>size:\n<ul>\n<li>hmmm</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>hmmm</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">xlist</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.get_distance_list", "modulename": "moleculegraph.molecule_utils", "qualname": "get_distance_list", "kind": "function", "doc": "<p>used in get_distance_matrix.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>y:\n<ul>\n<li>hmmm.</li>\n</ul></li>\n<li>xlist:\n<ul>\n<li>hmmm</li>\n</ul></li>\n<li>size:\n<ul>\n<li>hmmm</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>hmmm</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xlist</span>, </span><span class=\"param\"><span class=\"n\">ylist</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.get_distance_matrix", "modulename": "moleculegraph.molecule_utils", "qualname": "get_distance_matrix", "kind": "function", "doc": "<p>generates distance matrix from a list of neighboured atoms.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>neighbour_list:\n<ul>\n<li>list of neighboured atoms.</li>\n</ul></li>\n<li>atom_number:\n<ul>\n<li>number of atoms in the analyzed molecule.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>distance_matrix:\n<ul>\n<li>distance matrix of a molecule</li>\n<li>contains all distances</li>\n</ul></li>\n<li>bond_lists:\n<ul>\n<li>list of bond lists</li>\n<li>every bond list contains bonds of one distance\n<ul>\n<li>bond_lists[0]: neighbour list</li>\n<li>bond_lists[1]: angle list</li>\n<li>bond_lists[2]: torsion/dihedral list</li>\n<li>...</li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">neighbour_list</span>, </span><span class=\"param\"><span class=\"n\">atom_number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.get_bond_matrix", "modulename": "moleculegraph.molecule_utils", "qualname": "get_bond_matrix", "kind": "function", "doc": "<p>generates bond matrix from a list of neighboured atoms.\nredundant if distance matrix is available.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>neighbour_list:\n<ul>\n<li>list of neighboured atoms.</li>\n</ul></li>\n<li>atom_number:\n<ul>\n<li>number of atoms in the analyzed molecule.\nReturns:\nbond_matrix:\n<ul>\n<li>bond matrix of a molecule\n<ul>\n<li>bond: 1</li>\n<li>everything else: 0</li>\n</ul></li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">neighbour_list</span>, </span><span class=\"param\"><span class=\"n\">atom_number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.plot_graph", "modulename": "moleculegraph.molecule_utils", "qualname": "plot_graph", "kind": "function", "doc": "<p>plots graph...</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>atom_names:\n<ul>\n<li>list or np.array of atom names</li>\n</ul></li>\n<li>bond_list:\n<ul>\n<li>list of bonds</li>\n</ul></li>\n<li>saveto:\n<ul>\n<li>optional, location to save pic of graph to,</li>\n<li>add file format at the end ;)</li>\n</ul></li>\n<li>options:\n<ul>\n<li>dict</li>\n<li>networkx visualization options</li>\n</ul></li>\n</ul>\n\n<p>Returns:\n    nothing</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">atom_names</span>,</span><span class=\"param\">\t<span class=\"n\">bond_list</span>,</span><span class=\"param\">\t<span class=\"n\">saveto</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;node_size&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1200</span><span class=\"p\">,</span> <span class=\"s1\">&#39;node_color&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;white&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;edgecolors&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;black&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;linewidths&#39;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;width&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;with_labels&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">&#39;alpha&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;font_size&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.get_bond_list_from_smiles", "modulename": "moleculegraph.molecule_utils", "qualname": "get_bond_list_from_smiles", "kind": "function", "doc": "<p>gets a bond list from a smiles code using rd kit</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>smiles:\n<ul>\n<li>string, smiles code</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>bond_list:\n<ul>\n<li>np.array of list of bonds</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">smiles</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.graph_from_bonds", "modulename": "moleculegraph.molecule_utils", "qualname": "graph_from_bonds", "kind": "function", "doc": "<p>gets networkx graph object from a bond list</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>bond_list:\n<ul>\n<li>np.array of list of bonds</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>graph:\n<ul>\n<li>networkx graph object</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bond_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.visualize_graph", "modulename": "moleculegraph.molecule_utils", "qualname": "visualize_graph", "kind": "function", "doc": "<p>visualizes graph...</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>graph:\n<ul>\n<li>networkx graph object</li>\n</ul></li>\n<li>names:\n<ul>\n<li>list or np.array of atom names</li>\n</ul></li>\n<li>options:\n<ul>\n<li>dict</li>\n<li>networkx visualization options</li>\n</ul></li>\n</ul>\n\n<p>Returns:\n    nothing</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph</span>,</span><span class=\"param\">\t<span class=\"n\">names</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;node_size&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1200</span><span class=\"p\">,</span> <span class=\"s1\">&#39;node_color&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;white&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;edgecolors&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;black&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;linewidths&#39;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;width&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;with_labels&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">&#39;alpha&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;font_size&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.longest_simple_paths", "modulename": "moleculegraph.molecule_utils", "qualname": "longest_simple_paths", "kind": "function", "doc": "<p>uses networkx to get longest simple paths\ni.e. paths without double paths\nbetween source and target</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>graph:\n<ul>\n<li>networkx graph object</li>\n</ul></li>\n<li>source:\n<ul>\n<li>int, atom number to start from</li>\n</ul></li>\n<li>target:\n<ul>\n<li>int, atom number to end at</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>list of longest paths</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.get_longest_path", "modulename": "moleculegraph.molecule_utils", "qualname": "get_longest_path", "kind": "function", "doc": "<p>uses networkx to get longest simple path\nstarting from source</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>graph:\n<ul>\n<li>networkx graph object</li>\n</ul></li>\n<li>source:\n<ul>\n<li>int, atom number to start from</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>np.array, path (first that was found)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.get_shortest_paths", "modulename": "moleculegraph.molecule_utils", "qualname": "get_shortest_paths", "kind": "function", "doc": "<p>uses networkx to get shortest paths\nbetween source and target</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>graph:\n<ul>\n<li>networkx graph object</li>\n</ul></li>\n<li>source:\n<ul>\n<li>int, atom number to start from</li>\n</ul></li>\n<li>target:\n<ul>\n<li>int, atom number to end at</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>np.array, list of shortest paths</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.get_shortest_path", "modulename": "moleculegraph.molecule_utils", "qualname": "get_shortest_path", "kind": "function", "doc": "<p>uses networkx to get shortest paths\nbetween source and target</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>graph:\n<ul>\n<li>networkx graph object</li>\n</ul></li>\n<li>source:\n<ul>\n<li>int, atom number to start from</li>\n</ul></li>\n<li>target:\n<ul>\n<li>int, atom number to end at</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>np.array, shortest path (first that was found)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.get_shortest_nontrivial_path", "modulename": "moleculegraph.molecule_utils", "qualname": "get_shortest_nontrivial_path", "kind": "function", "doc": "<p>uses networkx to get shortest nontrivial paths\ni.e. longer than one bond between source and target\nuseful to detect ring structures</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>graph:\n<ul>\n<li>networkx graph object</li>\n</ul></li>\n<li>source:\n<ul>\n<li>int, atom number to start from</li>\n</ul></li>\n<li>target:\n<ul>\n<li>int, atom number to end at</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>np.array, shortest nontrivial path (first that is found)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.get_root", "modulename": "moleculegraph.molecule_utils", "qualname": "get_root", "kind": "function", "doc": "<p>gets root of a substructure i.e. branch</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>graph:\n<ul>\n<li>networkx graph object</li>\n</ul></li>\n<li>source:\n<ul>\n<li>int, atom number to start from</li>\n</ul></li>\n<li>range_back:\n<ul>\n<li>int, atom number to go back to find root</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>int, atom number to of root</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">range_back</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.bond_list_from_simple_path", "modulename": "moleculegraph.molecule_utils", "qualname": "bond_list_from_simple_path", "kind": "function", "doc": "<p>builds a bond list from a simple path\ni.e. path without branches or rings</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>path:\n<ul>\n<li>np.array, simple path</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>np.array, bond list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.get_diff_in_bond_lists", "modulename": "moleculegraph.molecule_utils", "qualname": "get_diff_in_bond_lists", "kind": "function", "doc": "<p>gets difference between two bond lists</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>bond_list_1:\n<ul>\n<li>np.array, bond list</li>\n</ul></li>\n<li>bond_list_2:\n<ul>\n<li>np.array, bond list</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>np.array, bond list containing diffs</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bond_list_1</span>, </span><span class=\"param\"><span class=\"n\">bond_list_2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.get_next_index", "modulename": "moleculegraph.molecule_utils", "qualname": "get_next_index", "kind": "function", "doc": "<p>gets index of next substructure</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>main_path:\n<ul>\n<li>networkx graph object</li>\n</ul></li>\n<li>remaining_bonds:\n<ul>\n<li>np.array, bond list</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>int, atom number of next index</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">main_path</span>, </span><span class=\"param\"><span class=\"n\">remaining_bonds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.get_graphstring", "modulename": "moleculegraph.molecule_utils", "qualname": "get_graphstring", "kind": "function", "doc": "<p>generates a graphstring from a bond list and atom names\nuses the longest path from source to an end as main path</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>bond_list:\n<ul>\n<li>np.array, bond list</li>\n</ul></li>\n<li>names:\n<ul>\n<li>np.array, atom names</li>\n</ul></li>\n<li>source:\n<ul>\n<li>int, start of main path, default=0</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>str, graphstring to use with moleculegraph</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bond_list</span>, </span><span class=\"param\"><span class=\"n\">names</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.get_graphstring_set_main", "modulename": "moleculegraph.molecule_utils", "qualname": "get_graphstring_set_main", "kind": "function", "doc": "<p>generates a graphstring from a bond list and atom names\nuses the longest path from source to an end as main path</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>graph:\n<ul>\n<li>networkx graph object</li>\n</ul></li>\n<li>bond_list:\n<ul>\n<li>np.array, bond list</li>\n</ul></li>\n<li>names:\n<ul>\n<li>np.array, atom names</li>\n</ul></li>\n<li>main_path:\n<ul>\n<li>np.array, main path to build graph from</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>str, graphstring to use with moleculegraph</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span>, </span><span class=\"param\"><span class=\"n\">bond_list</span>, </span><span class=\"param\"><span class=\"n\">names</span>, </span><span class=\"param\"><span class=\"n\">main_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.reenumerate_branches", "modulename": "moleculegraph.molecule_utils", "qualname": "reenumerate_branches", "kind": "function", "doc": "<p>reenumerates branches due to occurence</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>branches:\n<ul>\n<li>list with branch numbers</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>branches:\n<ul>\n<li>rearranged list with branch numbers</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">branches</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.get_branch_root", "modulename": "moleculegraph.molecule_utils", "qualname": "get_branch_root", "kind": "function", "doc": "<p>gets root of a branch</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>i: int\n<ul>\n<li>number of branch to get root for</li>\n</ul></li>\n<li>branches: np.array\n<ul>\n<li>array with branch numbers</li>\n</ul></li>\n</ul>\n\n<p>Returns: </p>\n\n<ul>\n<li>int number of root branch</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">i</span>, </span><span class=\"param\"><span class=\"n\">branches</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "moleculegraph.molecule_utils.make_graph", "modulename": "moleculegraph.molecule_utils", "qualname": "make_graph", "kind": "function", "doc": "<p>builds graph string from string list</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>stringlist:\n<ul>\n<li>list of strings containing names and</li>\n<li>add file format at the end ;)</li>\n</ul></li>\n</ul>\n\n<p>Returns:\n    nothing</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stringlist</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();